openapi: '3.0.3'
info:
  title: URL Shortener API
  version: '1.0'
  description: |
    A simple service for shortening URLs, tracking clicks, and managing domain restrictions.

    Features:
    - Create short links for long URLs, with optional custom IDs
    - Redirect to the original URL via short link
    - Private shortlinks (only accessible by the creator)
    - Track click analytics (IP address, user-agent, timestamp)
    - Export click data in JSON or CSV format
    - Domain blacklist support (admin only)
    - Firebase JWT-based authentication for secure access
    - Full OpenAPI 3.0 documentation
servers:
  - url: http://localhost:8080/
paths:
  /:
    get:
      summary: Root or home endpoint
      description: Send a welcoming message.
      tags:
        - Public
      responses:
        '200':
          description: Successfully get the welcoming message.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Welcome to the URL Shortener API
        '500':
          $ref: '#/components/responses/ServerError'
  /health:
    get:
      summary: Health check
      description: This endpoint is used to verify that the server is running properly.
      tags:
        - Public
      responses:
        '200':
          description: Healthy server.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  message:
                    type: string
                    example: Server is running
        '500':
          $ref: '#/components/responses/ServerError'

  /r/{short_id}:
    get:
      summary: Redirect to original URL
      description: >
        Redirects the user to the original URL based on the provided `short_id`. Click tracking is performed asynchronously  
        (IP, User-Agent, and timestamp are logged). If the shortlink is marked as private, only the owner can access it.

        Even if tracking fails, the redirect will still be performed.
      tags:
        - Redirect
      parameters:
        - $ref: '#/components/parameters/ShortID'
      responses:
        '302':
          description: Redirected to destination URL.
          headers:
            Location:
              description: The target original URL.
              schema:
                type: string
                format: uri
                example: https://example.com/original
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/ForbiddenAccess'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          description: Internal error while processing redirect (DB or tracking failed).
          $ref: '#/components/responses/ServerError'
      security:
        - {}
        - firebaseAuth: []

  /u/shorten:
    post:
      summary: Create a shortened URL for the authenticated user
      description: >
        Accepts a long URL (and optionally a custom ID), then returns a shortened URL ID.  
        Only accessible by authenticated users.  
        The system validates against blacklisted domains and Google Safe Browsing.

        If `custom_id` is not provided, the system will auto-generate an ID.
      tags:
        - Shortlink Services
      requestBody:
        required: true
        description: Long URL input data to be shortened
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShortenRequest'
      responses:
        '200':
          description: Short URL successfully generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortenResponse'
        '400':
          $ref: "#/components/responses/BadRequest"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ForbiddenInput'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - firebaseAuth: []

  /u/click-count/{short_id}:
    get:
      summary: Retrieve total click count of a shortened URL
      description: |
        Returns the total number of clicks for a shortlink owned by the authenticated user.

        - Requires authentication.
        - Only the owner of the shortlink can access this data.
        - Clicks are counted using a caching layer.
      tags:
        - Shortlink Services
      parameters:
        - name: short_id
          $ref: '#/components/parameters/ShortID'
      responses:
        '200':
          description: Click count retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClickCountResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ForbiddenAccess'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - firebaseAuth: []

  /u/click-count/{short_id}/export:
    get:
      summary: Export click log data from a short ID URL
      description: >
        Exports all click data associated with the user's short URL in CSV or JSON format.

        - Authentication is required.

        - Only the owner of the shortlink can access this data.

        - Supported export formats: `csv` (default) and `json`.

        - Data includes timestamp, IP, and user agent.
      tags:
        - Shortlink Services
      parameters:
        - name: short_id
          $ref: '#/components/parameters/ShortID'
        - name: format
          $ref: '#/components/parameters/ExportFormat'
      responses:
        '200':
          description: Export file successfully generated
          content:
            text/csv:
              schema:
                type: string
              examples:
                csv:
                  summary: Example CSV
                  value: |
                    timestamp,ip,user_agent
                    2000-01-20T12:00:00Z,192.168.1.1,Mozilla/5.0
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
                      example: 2000-01-20T12:00:00Z
                    ip:
                      type: string
                      example: 192.168.1.1
                    user_agent:
                      type: string
                      example: Mozilla/5.0
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ForbiddenAccess'
        '415':
          $ref: "#/components/responses/UnsupportedMedia"
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - firebaseAuth: []


  /u/analytics/{short_id}:
    get:
      summary: Retrieve analytics data for a short URL
      description: >
        Retrieves click analytics for the user's short URL, including timestamp, IP, and user-agent.

        - Only the owner is authorized.
        
        - Firebase JWT authentication is required.

        - Supports time filters, pagination, and sorting.
      tags:
        - Shortlink Services
      parameters:
        - name: short_id
          $ref: '#/components/parameters/ShortID'
        - name: limit
          $ref: '#/components/parameters/Analytics_Limit'
        - name: cursor
          $ref: '#/components/parameters/Analytics_Cursor'
        - name: after
          $ref: '#/components/parameters/Analytics_After'
        - name: before
          $ref: '#/components/parameters/Analytics_Before'
        - name: order_desc
          $ref: '#/components/parameters/Analytics_Order'
      responses:
        '200':
          description: Analytics data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ForbiddenAccess'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - firebaseAuth: []

  /admin/blacklist:
    post:
      summary: Add domain to blacklist
      description: >
        Accessible only by admins. Adds a domain to the blacklist to prevent users from shortening URLs from that domain.

        Fails if domain already exists or has an invalid format.
      tags:
        - Admin
      requestBody:
        $ref: '#/components/requestBodies/BlacklistRequest'
      responses:
        '200':
          description: Domain successfully added to blacklist
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: added
                  domain:
                    type: string
                    example: spam-domain.com
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ForbiddenAccess'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - firebaseAuth: []

    get:
      summary: Get list of blacklisted domains
      description: Retrieves all blacklisted domains from the system. Only accessible to admin users.
      tags:
        - Admin
      responses:
        '200':
          description: List of blacklisted domains successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: hostname
                  example: a-spam-domain.com, this-is-a-malicious-website.com
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ForbiddenAccess'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - firebaseAuth: []

  /admin/blacklist/{domain}:
    delete:
      summary: Remove domain from blacklist
      description: Removes a blacklisted domain. Only accessible to admin users.
      tags:
        - Admin
      parameters:
        - name: domain
          in: path
          required: true
          description: Domain to be removed from blacklist
          schema:
            type: string
            format: hostname
            example: spam-domain.com
      responses:
        '200':
          description: Domain successfully removed from blacklist
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: removed
                  domain:
                    type: string
                    example: spam-domain.com
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ForbiddenAccess'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
      security:
        - firebaseAuth: []

components:
  securitySchemes:
    firebaseAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        Firebase Authentication using email and password.  
        Include the Firebase ID token in the Authorization header as a Bearer token.

  schemas:
    # REQUEST BODY
    ShortenRequest:
      type: object
      required:
        - Shortlink Services
      properties:
        url:
          type: string
          format: uri
          example: https://example.com/page
        custom_id:
          type: string
          example: my_custom_id
        is_private:
          type: boolean
          example: true

    BlacklistDomain:
      type: object
      required:
        - domain
      properties:
        domain:
          type: string
          format: hostname
          example: a-spam-domain.com

    # RESPONSE BODY
    ShortenResponse:
      type: object
      properties:
        short_id:
          type: string
          example: abc123

    ClickCountResponse:
      type: object
      properties:
        short_id:
          type: string
          example: myshortid
        click_count:
          type: integer
          example: 42

    ClickLog:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: 2025-06-20T12:00:00Z
        ip:
          type: string
          example: 192.168.1.1
        user_agent:
          type: string
          example: Mozilla/5.0

    AnalyticsResponse:
      type: object
      properties:
        short_id:
          type: string
          example: analyticsTest123
        total_clicks:
          type: integer
          example: 100
        next_cursor:
          type: string
          format: date-time
          nullable: true
        clicks:
          type: array
          items:
            $ref: '#/components/schemas/ClickLog'

    ErrorResponse:
      type: string
      example: Internal server error

  requestBodies:
    ShortenRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ShortenRequest'

    BlacklistRequest:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BlacklistDomain'

  responses:

    BadRequest:
      description: Invalid or bad request data
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            invalid request data

    Unauthorized:
      description: Invalid or missing authentication token
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            Missing token

    ForbiddenAccess:
      description: Access denied
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            forbidden access

    ForbiddenInput:
      description: Forbidden input
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            forbidden:
              value: forbidden
            blacklistedID:
              value: custom ID is blacklisted
            unsafeURL:
              value: unsafe URL

    NotFound:
      description: Data not found
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            no data found

    Conflict:
      description: Data conflict (usually when a custom ID already exists)
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            custom ID already exists

    ServerError:
      description: Internal server error occurred
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            Internal server error

    UnsupportedMedia:
      description: Unsupported export format
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example: 
            Unsupported format; use ?format=csv or ?format=json
                    
          
  parameters:
    ## PATH
    ShortID:
      name: short_id
      in: path
      required: true
      description: The short ID of the shortened URL.
      schema:
        type: string
        example: abc123

    ## QUERY
    ExportFormat:
      name: format
      in: query
      required: false
      description: Export format (`csv` or `json`)
      schema:
        type: string
        enum: [csv, json]
        default: csv

    Analytics_Limit:
      name: limit
      in: query
      required: false
      description: Maximum number of click records to return
      schema:
        type: integer
        minimum: 1
        example: 50

    Analytics_Cursor:
      name: cursor
      in: query
      required: false
      description: Cursor for pagination (RFC3339 timestamp)
      schema:
        type: string
        format: date-time
        example: 2025-06-20T12:00:00Z

    Analytics_After:
      name: after
      in: query
      required: false
      description: Retrieve data after the specified time
      schema:
        type: string
        format: date-time

    Analytics_Before:
      name: before
      in: query
      required: false
      description: Retrieve data before the specified time
      schema:
        type: string
        format: date-time

    Analytics_Order:
      name: order_desc
      in: query
      required: false
      description: Whether to sort results in descending order
      schema:
        type: boolean
        default: false
